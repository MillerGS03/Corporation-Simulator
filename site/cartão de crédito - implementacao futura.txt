function FaturaCartaoCredito(diaFechamento)
    {
        this.width = 880;
        this.height = 650;
        this.x = (canvas.width - this.width)/2;
        this.y = (canvas.height - this.height)/2;

        this.limiteTotal = 10000; // Posteriormente substituir pela renda mensal

        this.getLimiteDisponivel = function(mes, ano)
        {
            var limiteDisp = this.limiteTotal;
            for (var i = 0; i < this.lancamentos.length; i++)
            {
                if ((this.lancamentos[i].mes == mes &&
                     this.lancamentos[i].ano == ano) &&
                     this.lancamentos[i].dia > this.diaFechamento 
                     ||
                    (this.lancamentos[i].mes == Calendario.proximoMes(mes) &&
                     this.lancamentos[i].ano == Calendario.anoProximoMes(mes, ano) &&
                     this.lancamentos[i].dia < this.diaFechamento))
                {
                    limiteDisp -= this.lancamentos[i].valor;
                }
            }
            return limiteDisp;
        }
        this.getLimiteSaqueDisponivel = function(mes, ano)
        {
            var limiteDisp = this.limiteTotal / 4;
            for (var i = 0; i < this.lancamentos.length; i++)
            {
                if  (this.lancamentos[i].nome == "Saque"
                     &&
                    (this.lancamentos[i].mes == mes &&
                     this.lancamentos[i].ano == ano) &&
                     this.lancamentos[i].dia > this.diaFechamento 
                     ||
                    (this.lancamentos[i].mes == Calendario.proximoMes(mes) &&
                     this.lancamentos[i].ano == Calendario.anoProximoMes(mes, ano) &&
                     this.lancamentos[i].dia < this.diaFechamento))
                {
                    limiteDisp -= this.lancamentos[i].valor;
                }
            }
            return limiteDisp;
        }

        /**
         * Checa se todas as parcelas estão dentro do limite disponível do cartão.
         * @param {number} mesInicial 
         * @param {number} anoInicial 
         * @param {number} parcelas 
         * @param {number} valorPorParcela
         * @returns Se estão(true) ou não(false) dentro do limite.
         */
        this.checarLimiteParcelas = function(diaInicial, mesInicial, anoInicial, parcelas, valorPorParcela)
        {
            var mes = diaInicial < this.diaFechamento?mesInicial:Calendario.proximoMes(mes);
            for (var i = 0, ano = anoInicial;
                     i < parcelas;
                     i++, mes = Calendario.proximoMes(mes), ano = Calendario.anoProximoMes(mes, ano))
                if (this.getLimiteDisponivel(mes, ano) < valorPorParcela)
                    return false;
            return true;
        }
        this.diaFechamento = diaFechamento<28?diaFechamento:28;
        this.lancamentos = new Array();
        this.lancamentosDestaFatura = new Array();

        var _this = this;

        this.btnFechar = new BotaoRetangular(this.x + this.width - 45, this.y + 10, 35, 35,
            {upperLeft: 5, upperRight: 5, lowerLeft: 5, lowerRight: 5 },
            35, 35, "gray", "#a3a3a3", null, null, "bold 18pt Century Gothic",
            "white", "X", false, true, false);
        this.btnFechar.onclick = function() {_this.aberto = false; esteB.ativar()};

        this.ativar = function() {
            BotaoRetangular.desativarTodos([this.btnFechar]);
            this.btnFechar.ativarInteracao();
        }
        this.desativar = function() {
            BotaoRetangular.reativar();
            this.btnFechar.desativarInteracao();
        }

        this.sacar = function(valor) {
            this.lancar(calendario.dia, calendario.mes, calendario.ano, "Saque", valor * 1.25);
            barra.dinheiro += valor;
        }

        var totalFatura = 0;
        var totalFaturaFormatado = "";
        var dataVencimento = "";
        var dataFechamento = "";
        var entrada = 0;
        var entradaFormatada = "";
        var valorParcelasFatura = 0;
        var valorParcelasFaturaFormatado = "";
        var limiteDisponivel = 0;
        var limiteDisponivelFormatado = "";
        var limiteSaqueDisponivel = 0;
        var limiteSaqueDisponivelFormatado = "";
        var mesFatura = 0;
        var anoFatura = 0;

        this.gerarFatura = function(mes, ano) 
        {
            mesFatura = mes;
            anoFatura = ano;

            this.lancamentosDestaFatura = new Array();
            totalFatura = 0;
            for (var i = 0; i < this.lancamentos.length; i++)
            {
                if ((this.lancamentos[i].mes == mes &&
                     this.lancamentos[i].ano == ano) &&
                     this.lancamentos[i].dia > this.diaFechamento 
                     ||
                    (this.lancamentos[i].mes == Calendario.proximoMes(mes) &&
                     this.lancamentos[i].ano == Calendario.anoProximoMes(mes, ano) &&
                     this.lancamentos[i].dia < this.diaFechamento))
                {
                    this.lancamentosDestaFatura.push(this.lancamentos[i]);
                    totalFatura += this.lancamentos[i].valor;
                }
            }
            var diaVencimento = this.diaFechamento + 10;
            var mesVencimento = Calendario.proximoMes(mes);
            var anoVencimento = Calendario.anoProximoMes(mes);
            if (diaVencimento > calendario.qtosDiasTemOMes[mesVencimento - 1])
            {
                anoVencimento = Calendario.anoProximoMes(mesVencimento);
                mesVencimento = Calendario.proximoMes(mesVencimento);
                diaVencimento -= calendario.qtosDiasTemOMes[mesVencimento - 1];
            }
            
            dataFechamento = formatarData(this.diaFechamento, Calendario.proximoMes(mes), Calendario.anoProximoMes(ano));
            dataVencimento = formatarData(diaVencimento, mesVencimento, anoVencimento);
            totalFaturaFormatado = formatarDinheiro(totalFatura);
            var valorComJuros = totalFatura * 1.3;
            entrada = valorComJuros / 7;
            entradaFormatada = formatarDinheiro(entrada);
            valorParcelasFatura = (valorComJuros - entrada) / 12;
            valorParcelasFaturaFormatado = formatarDinheiro(valorParcelasFatura);
            limiteDisponivel = this.getLimiteDisponivel(mes, ano);
            limiteDisponivelFormatado = formatarDinheiro(limiteDisponivel);
            limiteSaqueDisponivel = this.getLimiteSaqueDisponivel(mes, ano);
            limiteSaqueDisponivelFormatado = formatarDinheiro(limiteSaqueDisponivel);
        }

        this.aberto = false;

        this.desenhar = function()
        {
            ctx.save();

            ctx.globalAlpha = 0.3;
            ctx.fillStyle = "black";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.globalAlpha = 1;

            desenharForma();
            desenharHistoricoLancamentos();
            desenharInformacoesAdicionais(); // Data de vencimento, total da fatura, pagamento mínimo

            ctx.restore();
        }
        function desenharForma()
        {
            ctx.save();

            ctx.fillStyle = "white";
            ctx.strokeStyle = "black";
            roundRect(_this.x, _this.y, _this.width, _this.height, 15, true, true);
            ctx.fillStyle = "black";
            roundRect(_this.x, _this.y, _this.width, 55, {upperLeft: 15, upperRight: 15}, true, false);

            ctx.fillStyle = "white";
            ctx.font = "bold 18pt Century Gothic";
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillText("Fatura do cartão", _this.x + _this.width/2, _this.y + 27, _this.width);

            _this.btnFechar.desenhar();

            ctx.restore();
        }
        function desenharHistoricoLancamentos()
        {
            ctx.save();

            ctx.fillStyle = "#dddddd";
            ctx.strokeStyle = "black";
            roundRect(_this.x, _this.y + 55, 500, _this.height - 55, {lowerLeft: 15}, true, true);

            ctx.fillStyle = "gray";
            ctx.strokeStyle = "black";
            ctx.fillRect(_this.x, _this.y + 55, 500, 28);
            ctx.strokeRect(_this.x, _this.y + 55, 500, 28)

            ctx.fillStyle = "black";
            ctx.font = "bold 13pt Consolas";
            ctx.textAlign = "left";
            ctx.textBaseline = "middle";
            ctx.fillText("    Data    Histórico de Lançamentos     Valor    ", _this.x, _this.y + 69);

            for (var i = 0; i < _this.lancamentosDestaFatura.length; i++)
                _this.lancamentosDestaFatura[i].desenhar(_this.x, _this.y + 80 + 28 * i, i % 2, false);

            desenharTotal();

            ctx.strokeStyle = "black";
            ctx.lineWidth = 2;
            ctx.moveTo(_this.x + 500, _this.y + 55);
            ctx.lineTo(_this.x + 500, _this.y + _this.height);
            ctx.stroke();

            ctx.restore();
        }
        function desenharTotal()
        {
            ctx.save();

            ctx.strokeStyle = "black";
            ctx.fillStyle = (_this.lancamentosDestaFatura.length % 2 == 0)?"#c3c3c3":"#a3a3a3";
            ctx.fillRect(_this.x, _this.y + 80 + 28 * _this.lancamentosDestaFatura.length, 500, 28);
            ctx.strokeRect(_this.x, _this.y+ 80 + 28 * _this.lancamentosDestaFatura.length, 500, 28);

            ctx.fillStyle = "black";
            ctx.textAlign = "left";
            ctx.textBaseline = "middle";
            ctx.font = "bold 13pt Century Gothic";
            ctx.fillText(" Total", _this.x, _this.y + 94 + 28 * _this.lancamentosDestaFatura.length);
            ctx.textAlign = "right";
            ctx.fillText(totalFaturaFormatado, _this.x + 480, _this.y + 94 + 28 * _this.lancamentosDestaFatura.length)
        
            ctx.restore();
        }
        function desenharInformacoesAdicionais() // Data de vencimento, total da fatura, pagamento mínimo
        {
            desenharInfoPagamento();
            desenharInfoLimites();
        }
        function desenharInfoPagamento()
        {
            ctx.save();
            
            ctx.strokeStyle = "black";
            ctx.fillStyle = "#dddddd";

            // Data de fechamento
            ctx.fillRect(_this.x + 520, _this.y + 85, 150, 35);
            ctx.strokeRect(_this.x + 520, _this.y + 85, 150, 35);
            // Data de vencimento
            ctx.fillRect(_this.x + _this.width - 170, _this.y + 85, 150, 35);
            ctx.strokeRect(_this.x + _this.width - 170, _this.y + 85, 150, 35);
            // Total da fatura
            ctx.fillRect(_this.x + 520, _this.y + 140, 150, 35);
            ctx.strokeRect(_this.x + 520, _this.y + 140, 150, 35);
            // Parcelamento da fatura
            ctx.fillRect(_this.x + _this.width - 170, _this.y + 140, 150, 35);
            ctx.strokeRect(_this.x + _this.width - 170, _this.y + 140, 150, 35);

            ctx.font = "10pt Century Gothic";
            ctx.fillStyle = "black";
            ctx.textBaseline = "bottom";
            ctx.textAlign = "center";
            
            ctx.fillText("Data de fechamento", _this.x + 595, _this.y + 83, 150);
            ctx.fillText("Data de vencimento", _this.x + _this.width - 95, _this.y + 83, 150);
            ctx.fillText("Total da fatura", _this.x + 595, _this.y + 138, 150);
            ctx.fillText("Parcelamento da fatura ", _this.x + _this.width - 95, _this.y + 138, 150);

            ctx.font  = "bold 12pt Century Gothic";
            ctx.textBaseline = "middle";
            ctx.fillText(dataFechamento, _this.x + 595, _this.y + 102, 150);
            ctx.fillText(dataVencimento, _this.x + _this.width - 95, _this.y + 102, 150);
            ctx.fillText(totalFaturaFormatado, _this.x + 595, _this.y + 157, 150);
            ctx.font = "bold 10pt Century Gothic";
            ctx.textBaseline = "top";
            ctx.fillText("Entrada " + entradaFormatada, _this.x + _this.width - 95, _this.y + 142, 150);
            ctx.textBaseline = "bottom";
            ctx.fillText(" + 12x " + valorParcelasFaturaFormatado, _this.x + _this.width - 95, _this.y + 173, 150);

            ctx.restore();
        }
        function desenharInfoLimites()
        {
            ctx.save();

            var xLimites = _this.x + 520;
            var yLimites = _this.y + 240;
            var widthLimites = _this.width - 540;
            var heightLimites = 250;
            
            ctx.fillStyle = "white";
            ctx.strokeStyle = "black";
            ctx.fillRect(xLimites, yLimites, widthLimites, heightLimites);
            ctx.strokeRect(xLimites, yLimites, widthLimites, heightLimites);

            ctx.fillStyle = "gray";
            ctx.fillRect(xLimites, yLimites, widthLimites, 35);
            ctx.strokeRect(xLimites, yLimites, widthLimites, 35);

            ctx.fillStyle = "black";
            ctx.font = "bold 16pt Century Gothic";
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillText("Resumo de limite de crédito", xLimites + widthLimites/2, yLimites + 17);

            ctx.font = "bold 14pt Century Gothic";
            ctx.textAlign = "left";
            ctx.textAlign = "alphabetic";
            ctx.fillText("Limite total: ", xLimites + 5, yLimites + 50);
            ctx.fillText("Limite de saque: ", xLimites + 5, yLimites + 100);
            ctx.fillText("Limite de saque disponível: ", xLimites + 5, yLimites + 150);
            ctx.fillText("Limite disponível: ", xLimites + 5, yLimites + 200);
            ctx.font = "14pt Century Gothic";
            ctx.fillText(formatarDinheiro(_this.limiteTotal), xLimites + 20, yLimites + 75);
            ctx.fillText(formatarDinheiro(_this.limiteTotal/4), xLimites + 20, yLimites + 125);
            ctx.fillText(limiteSaqueDisponivelFormatado, xLimites + 20, yLimites + 175);
            ctx.fillText(limiteDisponivelFormatado, xLimites + 20, yLimites + 225);

            ctx.restore();
        }
        this.lancar = function(dia, mes, ano, nome, valorPorParcela, parcelas)
        {
            var novoLancamento = new Lancamento(dia, mes, ano, nome, valorPorParcela, this);
            this.lancamentos.splice(ondeEsta(novoLancamento).onde, 0, novoLancamento);

            var anoFutLanc = ano;
            var mesFutLanc = mes;

            for (var i = 1; i < parcelas; i++)
            {
                var anoFutLanc = Calendario.anoProximoMes(mesFutLanc, anoFutLanc);
                var mesFutLanc = Calendario.proximoMes(mesFutLanc);
                var diaFutLanc = (dia <= calendario.qtosDiasTemOMes[mesFutLanc - 1])?(dia):(calendario.qtosDiasTemOMes[mesFutLanc - 1]);

                this.lancar(diaFutLanc, mesFutLanc, anoFutLanc, nome, valorPorParcela, 1);
            }
        }
        this.removerLancamento = function(dia, mes, ano, nome, valorPorParcela)
        {
            var infoOnde = ondeEsta(new Lancamento(dia, mes, ano, nome, valorPorParcela, this));
            if (infoOnde.existe)
                this.lancamentos.splice(infoOnde.onde, 1);
        }
        function ondeEsta(novoLancamento)
        {
            var inicio = 0;
            var fim = _this.lancamentos.length -1;
            var meio;
            while (inicio <= fim)
            {
                meio = Math.floor((inicio + fim) / 2);
                if (_this.lancamentos[meio].compareTo(novoLancamento) > 0)
                    fim = meio - 1;
                else if (_this.lancamentos[meio].compareTo(novoLancamento) < 0)
                    inicio = meio + 1;
                else
                    return {existe: true, onde: meio};
            }
            return {existe: false, onde: inicio};
        }
    }

       var funcEmitirCartao = function() {
            if (barra.nivel < 1)
                alert("Você ainda não atingiu o nível mínimo.");
            else
            {
                fazerCompra("Emissão de cartão de crédito", 50, false, true, 1, function() {
                    esteB.jaTemCartaoDeCredito = true;
                    esteB.ativar();
                    esteB.btnCartaoCredito.text = "Cartão de crédito";
                    esteB.btnCartaoCredito.x = esteB.x + (800 - esteB.btnCartaoCredito.width)/2
                })
            }
        }
        var funcMostrarCartao = function() {
            abertoModalidade = 2;
            esteB.ativar();
        }
    function ativarCartaoCredito()
    {
        esteB.btnTelaInicial.ativarInteracao();
        esteB.btnGerarFaturaMesAtual.ativarInteracao();
        if (esteB.fatura.aberto)
            esteB.fatura.ativar();
    }
    function desenharCartaoCredito()
    {
        esteB.btnTelaInicial.desenhar();
        esteB.btnGerarFaturaMesAtual.desenhar();
        if (esteB.fatura.aberto)
            esteB.fatura.desenhar();
    }
    function desenharRequisitosCartaoCredito()
    {
        ctx.fillStyle = "black";
        ctx.textAlign = "right";
        ctx.textBaseline = "alphabetic";
        ctx.font = "bold 17pt Century Gothic";
        ctx.fillText("Taxa de emissão: ", esteB.x + 590, esteB.y + 380, 500);
        ctx.fillText("Nível mínimo: ", esteB.x + 590, esteB.y + 420, 500);
        ctx.fillText("Anuidade: ", esteB.x + 590, esteB.y + 460, 500);
        ctx.font = "17pt Century Gothic";
        ctx.textAlign = "left";
        ctx.fillText("$50,00", esteB.x + 590, esteB.y + 380, 500);
        ctx.fillText("3", esteB.x + 590, esteB.y + 420, 500);
        ctx.fillText("$380,00 ", esteB.x + 590, esteB.y + 460, 500);
    }
	

        esteB.btnCartaoCredito = new BotaoRetangular(esteB.x + 95, esteB.y + 380, 270, 50,
                                                    {upperLeft: 10, upperRight: 10, lowerLeft: 10, lowerRight: 10},
                                                    270, 50, "gray", "#a3a3a3", null, null, "16pt Century Gothic", "white",
                                                    (esteB.jaTemCartaoDeCredito)?"Cartão de Crédito":"Emitir cartão de crédito", false, false, false);
        esteB.btnCartaoCredito.onclick = function() {
            if (esteB.jaTemCartaoDeCredito)
                funcMostrarCartao();
            else
                funcEmitirCartao();
        }

        esteB.btnGerarFaturaMesAtual = new BotaoRetangular(esteB.x + 275, yTela + 130, 250, 45, 
                                                           {upperLeft: 10, upperRight: 10, lowerLeft: 10, lowerRight: 10},
                                                           250, 45, "gray", "#a3a3a3", null, null, "16pt Century Gothic", "white",
                                                           "Fatura do mês atual", false, false, false);
        esteB.btnGerarFaturaMesAtual.onclick = function() {esteB.fatura.gerarFatura(calendario.mes, calendario.ano); esteB.fatura.aberto = true; esteB.ativar()};

        esteB.btnFazerSaqueCredito = new BotaoRetangular(esteB.x + 575, yTela + 130, 250, 45, 
                                                           {upperLeft: 10, upperRight: 10, lowerLeft: 10, lowerRight: 10},
                                                           250, 45, "gray", "#a3a3a3", null, null, "16pt Century Gothic", "white",
                                                           "Fazer saque", false, false, false);
        esteB.btnFazerSaqueCredito.onclick = function() {esteB.fatura.sacar(1)};